@page "/Tests"

@using System.Linq;
@using BlazorClient.Model;
@using BlazorGloser.Services;

<h1>Test Lists</h1>
<link rel="stylesheet" href=@StrStyle>
@if (lst == null)
{
    <p><em>Loading ... </em></p>
}
else
{
    <table class="reportTable">
        <thead>
            <tr>
                <th width="40%">Date</th>
                <th width="40%">Name</th>
                <th>Max</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in lst.OrderByDescending(t => t.Dt))
            {
                <tr>
                    <td>@w.Dt.ToShortDateString()+@w.Dt.ToShortTimeString()</td>
                    <td>@w.Name</td>
                    <td>@w.Score</td>
                    <td>@w.MaxScore</td>
                </tr>
            }
        </tbody>
    </table>
}
<br />

<button class="btn btn-gloser_long" @onclick="ClearAll">Clear</button>

<h5>@strMsg</h5>
@code {
    [Inject]
    private ILocalStorageService Storage { get; set; }
    private string StrStyle
    {
        get => AppendRnd("css/Tables.css");
    }

    // Append a random number to force reload....
    private string AppendRnd(string sf)
    {
        Random r = new Random();
        string str = sf + @"?xxx=" + r.Next(DateTime.Now.Millisecond);
        return str;
    }

    private void ClearAll()
    {
        lst.Clear();
        Storage.RemoveItem("_tests_");
    }

    string strMsg;
    private List<Test> lst = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        try
        {
            var aTest = await Storage.GetItem<Test[]>("_tests_");
            lst = aTest.ToList();
        }
        catch (Exception e)
        {
            strMsg = e.Message;
        }
        StateHasChanged();
    }
}



